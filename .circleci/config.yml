version: 2.1

jobs:
  get_code:
    docker:
      - image: cimg/base:2020.01
    working_directory: ~/lidar
    steps:
      - checkout
      - save_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/lidar

  test_frontend:
    docker: 
      - image: circleci/node:latest
    working_directory: ~/lidar/frontend
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: npm-cache-v1-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm ci
      - save_cache:
          key: npm-cache-v1-{{ checksum "package-lock.json" }}
          paths:
            - /home/circleci/.npm
      - run:
          name: Run Tests
          command: npm test

  test_backend:
    docker:
      - image: circleci/openjdk:latest
      - image: circleci/mariadb:latest
    working_directory: ~/lidar/backend/lidar
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: backend-cache-v1-{{ checksum "pom.xml" }}
      - run: mvn -f pom.xml dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: backend-cache-v1-{{ checksum "pom.xml" }}
      - run:
          name: Setup db
          command: |
            echo "CREATE DATABASE lidarDB" | sudo mysql -u root  
            sudo mysql -u root "lidarDB" < test_dump.sql
            echo "CREATE USER aaa IDENTIFIED BY 'bbb';" | sudo mysql -u root
            echo "GRANT ALL PRIVILEGES ON *.* TO 'aaa'@localhost IDENTIFIED BY 'bbb';" | sudo mysql -u root
      - run:
          name: Run Tests
          command: mvn -f pom.xml integration-test

  test_login:
    docker:
      - image: circleci/openjdk:latest
      - image: circleci/mariadb:latest
    working_directory: ~/lidar/Login-Server
    steps:
      - resotre_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: login-cache-v1-{{ checksum "pom.xml" }}
      - run: mvn -f pom.xml dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: login-cache-v1-{{ checksum "pom.xml" }}
      - run:
          name: Setup db
          command: |
            echo "CREATE DATABASE Login" | sudo mysql -u root  
            sudo mysql -u root "Login" < test_dump.sql
            echo "CREATE USER aaa IDENTIFIED BY 'bbb';" | sudo mysql -u root
            echo "GRANT ALL PRIVILEGES ON *.* TO 'aaa'@localhost IDENTIFIED BY 'bbb';" | sudo mysql -u root
      - run:
          name: Run Tests
          command: mvn -f pom.xml integration-test

  deploy_frontend:
    docker: 
      - image: circleci/node:latest
    working_directory: ~/lidar/frontend
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: npm-cache-v1-{{ checksum "package-lock.json" }}
      - run:
          name: Build
          command: npm run build
      - run:
          name: Deploy
          command: |
            tar -cf frontend.tar build/*
            ssh ubuntu@lidar.icedcoffee.dev "tar -xf frontend.tar && rm frontend.tar && cp -r build/* /var/www/html && rm -r build"

  deploy_backend:
    docker:
      - image: circleci/openjdk:latest
    working_directory: ~/lidar/backend/lidar
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: mvn-cache-v1-{{ checksum "pom.xml" }}

  deploy_login:
    docker:
      - image: circleci/openjdk:latest
    working_directory: ~/lidar/Login-Server
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: login-cache-v1-{{ checksum "pom.xml" }}
   

workflows:
  version: 2
  workflow:
    jobs:
      - get_code
      - test_frontend:
          filters:
            branches:
              only:
                - master
                - dev
                - fontend
          requires:
            - get_code
      - test_backend:
          filters:
            branches:
              only:
                - master
                - dev
                - backend
          requires:
            - get_code
      - test_login:
          filters:
            branches:
              only:
                - master
                - dev
                - Login
          requires:
            - get_code
      - deploy_frontend:
          filters:
            branches:
              only: master
          requires:
            - test_frontend
            - test_backend
            - test_login
      - deploy_backend:
          filters:
            branches:
              only: master
          requires:
            - test_frontend
            - test_backend
            - test_login
      - deploy_login:
          filters:
            branches:
              only: master
          requires:
            - test_frontend
            - test_backend
            - test_login
